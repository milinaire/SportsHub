// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportsHubDAL.Data;

namespace SportsHubDAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.AboutSportHubLocalization", b =>
                {
                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyInfoSectionsId")
                        .HasColumnType("int");

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("SectionId", "LanguageId");

                    b.HasIndex("CompanyInfoSectionsId");

                    b.HasIndex("LanguageId");

                    b.ToTable("AboutSportHubLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.AdminPermissions", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AddOrDeleteLanguage")
                        .HasColumnType("bit");

                    b.Property<bool>("BlockUsers")
                        .HasColumnType("bit");

                    b.Property<bool>("CreateOrDeleteAd")
                        .HasColumnType("bit");

                    b.Property<bool>("CreateOrDeleteAdmins")
                        .HasColumnType("bit");

                    b.Property<bool>("CreateOrDeleteArticles")
                        .HasColumnType("bit");

                    b.Property<bool>("CreateOrDeleteBanners")
                        .HasColumnType("bit");

                    b.Property<bool>("CreateOrDeleteCategories")
                        .HasColumnType("bit");

                    b.Property<bool>("DeleteUsers")
                        .HasColumnType("bit");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("AdminPermissions");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Advertising", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Advertisings");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.AdvertisingLocalization", b =>
                {
                    b.Property<int>("AdvertisingId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdvertisingId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("AdvertisingLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.AllovedPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AllovedPartners");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ContentId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContentId");

                    b.HasIndex("ImageId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.ArticleLocalization", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Alt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("ArticleId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("ArticleLocalization");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.BannerLocalization", b =>
                {
                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BannerId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("BannerLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.BreakDown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<bool>("Show")
                        .HasColumnType("bit");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("TeamId");

                    b.ToTable("BreakDowns");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("Show")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.CategoryAd", b =>
                {
                    b.Property<int>("AdvertisingId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Displayed")
                        .HasColumnType("int");

                    b.Property<int>("Opened")
                        .HasColumnType("int");

                    b.HasKey("AdvertisingId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryAds");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.CategoryLocalization", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CategoryLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.CategoryPartner", b =>
                {
                    b.Property<int>("NewsPartnerId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Sourses")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsPartnerId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryPartners");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.CompanyInfoLocalization", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LanguageId1")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.HasIndex("LanguageId1");

                    b.ToTable("CompanyInfoLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.CompanyInfoSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Show")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CompanyInfoSections");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Conference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Show")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.ConferenceLocalization", b =>
                {
                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConferenceId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("ConferenceLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.ContactUsLocalizationn", b =>
                {
                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyInfoSectionsId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionId", "LanguageId");

                    b.HasIndex("CompanyInfoSectionsId");

                    b.HasIndex("LanguageId");

                    b.ToTable("ContactUsLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowComments")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.ContributorsLocalization", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LanguageId1")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.HasIndex("LanguageId1");

                    b.ToTable("ContributorsLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.ContributorsSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Show")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ContributorsSections");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.ContributorsSectionsLocalization", b =>
                {
                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("ContributorsSectionId")
                        .HasColumnType("int");

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("SectionId", "LanguageId");

                    b.HasIndex("ContributorsSectionId");

                    b.HasIndex("LanguageId");

                    b.ToTable("ContributorsSectionsLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.DeletableInfoSectionsLocalization", b =>
                {
                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyInfoSectionsId")
                        .HasColumnType("int");

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("SectionId", "LanguageId");

                    b.HasIndex("CompanyInfoSectionsId");

                    b.HasIndex("LanguageId");

                    b.ToTable("DeletableInfoSectionsLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.FollowedTeams", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TeamId", "UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("FollowedTeams");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Footer", b =>
                {
                    b.Property<bool>("ShowCompanyInfo")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowContributors")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowNewsletter")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowNewsletterDescription")
                        .HasColumnType("bit");

                    b.ToTable("Footers");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Home", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PeriodId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoOfTheDayImgId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowMostCommented")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowMostPopular")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowPhotoOfTheDay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.HasIndex("PhotoOfTheDayImgId");

                    b.ToTable("Homes");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("language")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<bool>("Dislike")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.MainArticles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<bool>("Show")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("MainArticles");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.NewsLetterLocalization", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId1")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.HasIndex("LanguageId1");

                    b.ToTable("NewsLetterLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.NewsLetterSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("All")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TeamId");

                    b.ToTable("NewsLetterSubscriptions");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.NewsPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AllovedPartnersId")
                        .HasColumnType("int");

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefoultSourses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AllovedPartnersId");

                    b.ToTable("NewsPartners");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Period", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.PhotoOfTheDayLocalization", b =>
                {
                    b.Property<int>("PhotoOfTheDayId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("HomeId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoOfTheDayAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoOfTheDayAuthor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoOfTheDayDesciption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoOfTheDayTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhotoOfTheDayId", "LanguageId");

                    b.HasIndex("HomeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("PhotoOfTheDayLocalization");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.PredefinedBanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("Show")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("PredefinedBanners");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.PredefinedBannerLocalization", b =>
                {
                    b.Property<int>("PredefinedBannerId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PredefinedBannerId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("PredefinedBannerLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Privacy", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId1")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.HasIndex("LanguageId1");

                    b.ToTable("Privacies");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.SocialNetwork", b =>
                {
                    b.Property<bool>("AllowShareVideos")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowFollow")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowFollowFacebook")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowFollowGoogle")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowFollowTwitter")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowFollowYoutube")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowLoginOrSignUp")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowLoginOrSignUpFacebook")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowLoginOrSignUpGoogle")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowLoginOrSignUpTwitter")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowShare")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowShareFacebook")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowShareGoogle")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowShareTwitter")
                        .HasColumnType("bit");

                    b.ToTable("SocialNetvorks");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.SportArticle", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "ConferenceId", "TeamId", "LocationId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TeamId");

                    b.ToTable("SportArticle");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("Ispublished")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.SurveyLocalization", b =>
                {
                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurveyId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("SurveyLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.SurveyOptionLocalization", b =>
                {
                    b.Property<int>("SurveyOptionId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Option")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurveyOptionId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("SurveyOptionLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.SurveyOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyOptions");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<bool>("Show")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("ImageId");

                    b.HasIndex("LocationId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.TeamLocalization", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Desctiption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("TeamLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Term", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId1")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.HasIndex("LanguageId1");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContentId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.VideoLocalization", b =>
                {
                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VideoId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("VideoLocalization");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Views", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("UserId");

                    b.ToTable("Views");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Votes", b =>
                {
                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyOptionsId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OptionId", "UserId");

                    b.HasIndex("SurveyOptionsId");

                    b.HasIndex("UserId1");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsHubDAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsHubDAL.Entities.AboutSportHubLocalization", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.CompanyInfoSection", "CompanyInfoSections")
                        .WithMany("AboutSportHubTLocalizations")
                        .HasForeignKey("CompanyInfoSectionsId");

                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("AboutSportHubLocalizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyInfoSections");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.AdminPermissions", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Advertising", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.AdvertisingLocalization", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Advertising", "Advertising")
                        .WithMany("AdvertisingLocalization")
                        .HasForeignKey("AdvertisingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("AdvertisingLocalizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertising");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Article", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("SportsHubDAL.Entities.Content", "Content")
                        .WithMany("Article")
                        .HasForeignKey("ContentId");

                    b.HasOne("SportsHubDAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Category");

                    b.Navigation("Content");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.ArticleLocalization", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Article", "Article")
                        .WithMany("ArticleLocalizations")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("ArticleLocalizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Banner", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Category", "Category")
                        .WithMany("Banners")
                        .HasForeignKey("CategoryId");

                    b.HasOne("SportsHubDAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Category");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.BannerLocalization", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Banner", "Banner")
                        .WithMany("BannerLocalizations")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("BannerLocalizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.BreakDown", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Category", "Category")
                        .WithMany("BreakDowns")
                        .HasForeignKey("CategoryId");

                    b.HasOne("SportsHubDAL.Entities.Conference", "Conference")
                        .WithMany("BreakDowns")
                        .HasForeignKey("ConferenceId");

                    b.HasOne("SportsHubDAL.Entities.Team", "Team")
                        .WithMany("BreakDowns")
                        .HasForeignKey("TeamId");

                    b.Navigation("Category");

                    b.Navigation("Conference");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.CategoryAd", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Advertising", "Advertising")
                        .WithMany("CategoryAd")
                        .HasForeignKey("AdvertisingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsHubDAL.Entities.Category", "Category")
                        .WithMany("CategoryAds")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertising");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.CategoryLocalization", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Category", "Category")
                        .WithMany("CategoryLocalizations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("CategoryLocalizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.CategoryPartner", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Category", "Category")
                        .WithMany("CategoryPartners")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsHubDAL.Entities.NewsPartner", "NewsPartner")
                        .WithMany("CategoryPartners")
                        .HasForeignKey("NewsPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("NewsPartner");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Comment", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Content", "Content")
                        .WithMany("Comment")
                        .HasForeignKey("ContentId");

                    b.HasOne("SportsHubDAL.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Content");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.CompanyInfoLocalization", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("CompanyInfoLocalizations")
                        .HasForeignKey("LanguageId1");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Conference", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Category", "Category")
                        .WithMany("Conferences")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.ConferenceLocalization", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Conference", "Conference")
                        .WithMany("ConferenceLocalizations")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("ConferenceLocalizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conference");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.ContactUsLocalizationn", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.CompanyInfoSection", "CompanyInfoSections")
                        .WithMany("ContactUsLocalizations")
                        .HasForeignKey("CompanyInfoSectionsId");

                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("ContactUsLocalizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyInfoSections");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.ContributorsLocalization", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("ContributorsLocalizations")
                        .HasForeignKey("LanguageId1");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.ContributorsSectionsLocalization", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.ContributorsSection", "ContributorsSection")
                        .WithMany("ContributorsSectionsLocalizations")
                        .HasForeignKey("ContributorsSectionId");

                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("ContributorsSectionsLocalizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContributorsSection");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.DeletableInfoSectionsLocalization", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.CompanyInfoSection", "CompanyInfoSections")
                        .WithMany("DeletableInfoSectionsLocalizations")
                        .HasForeignKey("CompanyInfoSectionsId");

                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("DeletableInfoSectionsLocalizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyInfoSections");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.FollowedTeams", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Team", "Team")
                        .WithMany("FolovedTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsHubDAL.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Home", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Period", "Period")
                        .WithMany("Home")
                        .HasForeignKey("PeriodId");

                    b.HasOne("SportsHubDAL.Entities.Image", "PhotoOfTheDayImg")
                        .WithMany()
                        .HasForeignKey("PhotoOfTheDayImgId");

                    b.Navigation("Period");

                    b.Navigation("PhotoOfTheDayImg");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Like", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId");

                    b.HasOne("SportsHubDAL.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.MainArticles", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Article", "Article")
                        .WithMany("MainArticles")
                        .HasForeignKey("ArticleId");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.NewsLetterLocalization", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("NewsLetterLocalizations")
                        .HasForeignKey("LanguageId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.NewsLetterSubscription", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Category", "Category")
                        .WithMany("NewsLetterSubscriptions")
                        .HasForeignKey("CategoryId");

                    b.HasOne("SportsHubDAL.Entities.Conference", "Conference")
                        .WithMany("NewsLetterSubscriptions")
                        .HasForeignKey("ConferenceId");

                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("NewsLetterSubscriptions")
                        .HasForeignKey("LanguageId");

                    b.HasOne("SportsHubDAL.Entities.Team", "Team")
                        .WithMany("NewsLetterSubscriptions")
                        .HasForeignKey("TeamId");

                    b.Navigation("Category");

                    b.Navigation("Conference");

                    b.Navigation("Language");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.NewsPartner", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.AllovedPartner", "AllovedPartners")
                        .WithMany("NewsPartners")
                        .HasForeignKey("AllovedPartnersId");

                    b.Navigation("AllovedPartners");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.PhotoOfTheDayLocalization", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Home", "Home")
                        .WithMany("PhotoOfTheDayLocalization")
                        .HasForeignKey("HomeId");

                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("PhotoOfTheDayLocalizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Home");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.PredefinedBanner", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.PredefinedBannerLocalization", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("PredefinedBannerLocalizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsHubDAL.Entities.PredefinedBanner", "PredefinedBanner")
                        .WithMany("PredefinedBannerLocalization")
                        .HasForeignKey("PredefinedBannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PredefinedBanner");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Privacy", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("Privacies")
                        .HasForeignKey("LanguageId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.SportArticle", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Article", "Article")
                        .WithMany("SportArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsHubDAL.Entities.Conference", "Conference")
                        .WithMany("SportArticle")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsHubDAL.Entities.Location", "Location")
                        .WithMany("SportArticle")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsHubDAL.Entities.Team", "Team")
                        .WithMany("SportArticle")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Conference");

                    b.Navigation("Location");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.SurveyLocalization", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("SurveyLocalizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsHubDAL.Entities.Survey", "Survey")
                        .WithMany("SurveyLocalizations")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.SurveyOptionLocalization", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("SurveyOptionLocalizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsHubDAL.Entities.SurveyOptions", "SurveyOption")
                        .WithMany("SurveyOptionLocalizations")
                        .HasForeignKey("SurveyOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("SurveyOption");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.SurveyOptions", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Survey", "Survey")
                        .WithMany("SurveyOptions")
                        .HasForeignKey("SurveyId");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Team", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Conference", "Conference")
                        .WithMany("Teams")
                        .HasForeignKey("ConferenceId");

                    b.HasOne("SportsHubDAL.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("SportsHubDAL.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Conference");

                    b.Navigation("Image");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.TeamLocalization", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("TeamLocalizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsHubDAL.Entities.Team", "Team")
                        .WithMany("TeamLocalizations")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Term", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("Terms")
                        .HasForeignKey("LanguageId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Video", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Content", "Content")
                        .WithMany("Video")
                        .HasForeignKey("ContentId");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.VideoLocalization", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Language", "Language")
                        .WithMany("VideoLocalizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsHubDAL.Entities.Video", "Video")
                        .WithMany("VideoTrasnlations")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Views", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.Content", "Content")
                        .WithMany("Views")
                        .HasForeignKey("ContentId");

                    b.HasOne("SportsHubDAL.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Content");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Votes", b =>
                {
                    b.HasOne("SportsHubDAL.Entities.SurveyOptions", "SurveyOptions")
                        .WithMany("Votes")
                        .HasForeignKey("SurveyOptionsId");

                    b.HasOne("SportsHubDAL.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("SurveyOptions");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Advertising", b =>
                {
                    b.Navigation("AdvertisingLocalization");

                    b.Navigation("CategoryAd");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.AllovedPartner", b =>
                {
                    b.Navigation("NewsPartners");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Article", b =>
                {
                    b.Navigation("ArticleLocalizations");

                    b.Navigation("MainArticles");

                    b.Navigation("SportArticles");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Banner", b =>
                {
                    b.Navigation("BannerLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Category", b =>
                {
                    b.Navigation("Banners");

                    b.Navigation("BreakDowns");

                    b.Navigation("CategoryAds");

                    b.Navigation("CategoryLocalizations");

                    b.Navigation("CategoryPartners");

                    b.Navigation("Conferences");

                    b.Navigation("NewsLetterSubscriptions");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Comment", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.CompanyInfoSection", b =>
                {
                    b.Navigation("AboutSportHubTLocalizations");

                    b.Navigation("ContactUsLocalizations");

                    b.Navigation("DeletableInfoSectionsLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Conference", b =>
                {
                    b.Navigation("BreakDowns");

                    b.Navigation("ConferenceLocalizations");

                    b.Navigation("NewsLetterSubscriptions");

                    b.Navigation("SportArticle");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Content", b =>
                {
                    b.Navigation("Article");

                    b.Navigation("Comment");

                    b.Navigation("Video");

                    b.Navigation("Views");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.ContributorsSection", b =>
                {
                    b.Navigation("ContributorsSectionsLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Home", b =>
                {
                    b.Navigation("PhotoOfTheDayLocalization");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Language", b =>
                {
                    b.Navigation("AboutSportHubLocalizations");

                    b.Navigation("AdvertisingLocalizations");

                    b.Navigation("ArticleLocalizations");

                    b.Navigation("BannerLocalizations");

                    b.Navigation("CategoryLocalizations");

                    b.Navigation("CompanyInfoLocalizations");

                    b.Navigation("ConferenceLocalizations");

                    b.Navigation("ContactUsLocalizations");

                    b.Navigation("ContributorsLocalizations");

                    b.Navigation("ContributorsSectionsLocalizations");

                    b.Navigation("DeletableInfoSectionsLocalizations");

                    b.Navigation("NewsLetterLocalizations");

                    b.Navigation("NewsLetterSubscriptions");

                    b.Navigation("PhotoOfTheDayLocalizations");

                    b.Navigation("PredefinedBannerLocalizations");

                    b.Navigation("Privacies");

                    b.Navigation("SurveyLocalizations");

                    b.Navigation("SurveyOptionLocalizations");

                    b.Navigation("TeamLocalizations");

                    b.Navigation("Terms");

                    b.Navigation("VideoLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Location", b =>
                {
                    b.Navigation("SportArticle");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.NewsPartner", b =>
                {
                    b.Navigation("CategoryPartners");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Period", b =>
                {
                    b.Navigation("Home");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.PredefinedBanner", b =>
                {
                    b.Navigation("PredefinedBannerLocalization");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Survey", b =>
                {
                    b.Navigation("SurveyLocalizations");

                    b.Navigation("SurveyOptions");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.SurveyOptions", b =>
                {
                    b.Navigation("SurveyOptionLocalizations");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Team", b =>
                {
                    b.Navigation("BreakDowns");

                    b.Navigation("FolovedTeams");

                    b.Navigation("NewsLetterSubscriptions");

                    b.Navigation("SportArticle");

                    b.Navigation("TeamLocalizations");
                });

            modelBuilder.Entity("SportsHubDAL.Entities.Video", b =>
                {
                    b.Navigation("VideoTrasnlations");
                });
#pragma warning restore 612, 618
        }
    }
}
